*openbrowser-github* Launch GitHub quickly from Vim

Author:
  tyru <tyru.exe@gmail.com>
Version: 1.0.0
License: See LICENSE file in this repository

==============================================================================
CONTENTS						*openbrowser-github-contents*

Introduction		|openbrowser-github-introduction|
Requirements		|openbrowser-github-requirements|
Interface			|openbrowser-github-interface|
  Variables			|openbrowser-github-variables|
  Commands			|openbrowser-github-commands|
TODO				|openbrowser-github-todo|
Changelog			|openbrowser-github-changelog|


==============================================================================
INTRODUCTION						*openbrowser-github-introduction* {{{

Opens GitHub URL of current file, etc. from Vim.
Also supports GitHub Enterprise(|openbrowser-github-enterprise|).

See |openbrowser-github-commands| for the details of available commands.

}}}
==============================================================================
REQUIREMENTS						*openbrowser-github-requirements* {{{

You must install the following plugin/libraries.

* open-browser.vim
  https://github.com/tyru/open-browser.vim
* git command in your PATH

}}}
==============================================================================
GITHUB ENTERPRISE SETTING			*openbrowser-github-enterprise* {{{

If you have `hub` command
-----------------------

If you have `hub` command(https://github.com/github/hub) in your PATH,
|openbrowser-github| executes the following command: >
	hub browse -u -- {path}
And it will open the returned (output) URL.

If you _don't_ have `hub` command
-------------------------------

If you don't have `hub` command in your PATH, |openbrowser-github| tries to
get each part of URL from the following gitconfig key:

* hub.host

You can specify GitHub Enterprise repository URL by setting above keys in
gitconfig.

For example, you can set `hub.host` by executing the following command in your
git repository which you want to specify GitHub Enterprise repository URL.
>
	git config --local hub.host my.git.org
<
}}}
==============================================================================
INTERFACE				*openbrowser-github-interface* {{{
------------------------------------------------------------------------------
VARIABLES					*openbrowser-github-variables* {{{

					*g:openbrowser_github_always_used_branch*
g:openbrowser_github_always_used_branch
							(Default: "")
	If this variable is not empty string,
	|openbrowser-github| always opens current file
	in the branch.

					*g:openbrowser_github_always_use_commit_hash*
g:openbrowser_github_always_use_commit_hash
							(Default: 1)
	If this variable is non-zero value,
	|openbrowser-github| always opens a URL
	with a current commit hash.
	ex) https://github.com/tyru/open-browser.vim/blob/9f1de0e38a1e378061a8f10df6ed8e22c48aa9ae/autoload/openbrowser.vim

	If this variable is zero value,
	|openbrowser-github| opens a URL
	with a current commit hash
	if current working tree is detached state.
	Otherwise, |openbrowser-github| opens a URL
	with a current branch's latest file.
	ex) https://github.com/tyru/open-browser.vim/blob/master/autoload/openbrowser.vim

					*g:openbrowser_github_always_use_upstream_commit_hash*
g:openbrowser_github_always_use_upstream_commit_hash
							(Default: 0)
	If this variable is non-zero value, |openbrowser-github| always opens a
    URL with a current upstream commit hash. This is useful if you usually have
    local commits which are not yet pushed, and most of the upstream and local
    code is unchanged.

					*g:openbrowser_github_url_exists_check*
g:openbrowser_github_url_exists_check
							(Default: "yes")
	This determines the behavior when you
	push to the non-existent/unauthorized repository.
	If this variable is "yes", shows prompt to ask you
	if you really open URL.
	If this variable is "ignore", any prompts and warning
	messages aren't showed.
	Otherwise, it is treated as default value ("yes").

					*g:openbrowser_github_select_current_line*
g:openbrowser_github_select_current_line
							(Default: 0)
	|:OpenGithubFile| opens a github page that current line is highlighted on.
	If this variable is non-zero, always opens URL with current line fragment
	(`...#Lxxx`) even the line is not selected in visual-mode.  If this
	variable is zero (default), it opens URL with current line fragment only
	when the line is selected in visual-mode.

}}}
------------------------------------------------------------------------------
COMMANDS					*openbrowser-github-commands* {{{

:OpenGithubFile [{path}]					*:OpenGithubFile*
------------------------

Opens a specific file in github.com repository(it also opens in the current branch by default).
>
	" Opens current files URL in github.com
	" ex) https://{hostname}/{user}/{repos}/blob/{hash or branch}/{relpath}
	:OpenGithubFile

	" Opens current files highlighted place in github.com
	" ex) https://{hostname}/{user}/{repos}/blob/{hash or branch}/{relpath}#{lnum}
	:'<,'>OpenGithubFile

	" Opens a specific file in github.com
	" ex) https://{hostname}/{user}/{repos}/blob/{hash or branch}/PATH/TO/FILE#{lnum}
	:OpenGithubFile PATH/TO/FILE
<
	Those URLs are influenced by some global variables.
	See:
	* |g:openbrowser_github_always_used_branch|
	* |g:openbrowser_github_always_use_commit_hash|


							*:OpenGithubIssue*
:OpenGithubIssue
:OpenGithubIssue [#]{number} [{user}/{repos}]
:OpenGithubIssue {user}/{repos}
-----------------------------------

Opens a specific Issue.
>
	" Opens current repositories Issue #1
	" ex) https://{hostname}/{user}/{repos}/issues/1
	:OpenGithubIssue 1

	" Opens a specific repositories Issue #1
	" ex) https://{hostname}/tyru/open-browser.vim/issues/1
	:OpenGithubIssue 1 tyru/open-browser.vim

	" Opens current repositories Issue List
	" ex) https://{hostname}/{user}/{repos}/issues
	:OpenGithubIssue

	" Opens a specific repositories Issue list
	" ex) https://{hostname}/tyru/open-browser.vim/issues
	:OpenGithubIssue tyru/open-browser.vim
<

							*:OpenGithubPullReq*
:OpenGithubPullReq
:OpenGithubPullReq [#]{number} [{user}/{repos}]
:OpenGithubPullReq #{branch} [{user}/{repos}]
:OpenGithubPullReq {user}/{repos}
-------------------------------------

Opens '/pulls' page when it has no argument.
Otherwise, it does entirely the same thing as |:OpenGithubIssue|
since GitHub redirects '/issues/1' to '/pull/1'
if #1 is a Pull Request.

Additionally, this command supports opening a pull request page by branch name.
>
	" Opens current repository's pull request of specified branch name
	:OpenGithubPullReq #branch_name_of_pull_request
	" Opens https://github.com/tyru/open-browser-github.vim/pull/25
	:OpenGithubPullReq #OpenGithubPullReq-branch-argument tyru/open-browser-github.vim
<

							*:OpenGithubProject*
:OpenGithubProject [{user}/{repos}]

Opens a project page.
>
	" Opens current opening file's repository.
	" ex) https://{hostname}/{user}/{name}
	:OpenGithubProject
>
	" Opens current opening file's repository.
	" ex) https://{hostname}/tyru/open-browser.vim
	:OpenGithubProject tyru/open-browser.vim
<
							*:OpenGithubCommit*
:OpenGithubCommit {commit hash} [{user}/{repos}]

Opens a commit page.
>
	" Opens current repository's commit.
	" ex) https://{hostname}/{user}/{name}/commit/{hash}
	:OpenGithubCommit HEAD
>
	" Opens speicified repository's commit.
	" ex) https://{hostname}/vim/vim/commit/b1c9198afb
	:OpenGithubCommit b1c9198afb vim/vim

}}}
}}}
==============================================================================
TODO						*openbrowser-github-todo* {{{

Any requests? ;)

https://github.com/tyru/open-browser-github.vim/issues

}}}
==============================================================================
CHANGELOG						*openbrowser-github-changelog* {{{

1.0.0:
- Initial upload

}}}
==============================================================================
vim:tw=78:fo=tcq2mM:ts=4:ft=help:norl:noet:fdm=marker:fen
